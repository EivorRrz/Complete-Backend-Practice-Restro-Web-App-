{
  "info": {
    "name": "Restaurant API Collection",
    "description": "Complete API testing collection for Restaurant Management System",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": ["{{base_url}}"],
          "path": ["health"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has success property', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('success', true);",
              "});",
              "",
              "pm.test('Response has timestamp', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('timestamp');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "User Registration",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userName\": \"{{test_username}}\",\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\",\n  \"phone\": \"{{test_phone}}\",\n  \"address\": [\"123 Test Street\"],\n  \"answer\": \"my pet name\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/auth/register",
          "host": ["{{base_url}}"],
          "path": ["api", "auth", "register"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response has token', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('token');",
              "    pm.environment.set('auth_token', jsonData.token);",
              "});",
              "",
              "pm.test('User data is correct', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.user.email).to.eql(pm.environment.get('test_email'));",
              "    pm.expect(jsonData.user).to.not.have.property('password');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "User Login",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"{{test_email}}\",\n  \"password\": \"{{test_password}}\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/auth/login",
          "host": ["{{base_url}}"],
          "path": ["api", "auth", "login"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has token', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('token');",
              "    pm.environment.set('auth_token', jsonData.token);",
              "    pm.environment.set('user_id', jsonData.user.id);",
              "});",
              "",
              "pm.test('Login successful', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get User Profile",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{auth_token}}"
          }
        ],
        "url": {
          "raw": "{{base_url}}/api/user/profile",
          "host": ["{{base_url}}"],
          "path": ["api", "user", "profile"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Profile data is present', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('user');",
              "    pm.expect(jsonData.user).to.have.property('email');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create Category",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{auth_token}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"title\": \"{{test_category_name}}\",\n  \"imageUrl\": \"https://example.com/category.jpg\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/category/create",
          "host": ["{{base_url}}"],
          "path": ["api", "category", "create"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Category created successfully', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "    pm.expect(jsonData.category).to.have.property('_id');",
              "    pm.environment.set('category_id', jsonData.category._id);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get All Categories",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/category/getAll",
          "host": ["{{base_url}}"],
          "path": ["api", "category", "getAll"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Categories array is present', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('categories');",
              "    pm.expect(jsonData.categories).to.be.an('array');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create Food Item",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{auth_token}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"title\": \"{{test_food_name}}\",\n  \"description\": \"Delicious test food item\",\n  \"price\": 15.99,\n  \"imageUrl\": \"https://example.com/food.jpg\",\n  \"foodTags\": \"spicy,vegetarian\",\n  \"category\": \"{{category_id}}\",\n  \"code\": \"TF001\",\n  \"restaurant\": \"test-restaurant-id\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/api/food/create",
          "host": ["{{base_url}}"],
          "path": ["api", "food", "create"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Food item created successfully', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.success).to.be.true;",
              "    pm.expect(jsonData.newFood).to.have.property('_id');",
              "    pm.environment.set('food_id', jsonData.newFood._id);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get All Foods",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/api/food/getAll",
          "host": ["{{base_url}}"],
          "path": ["api", "food", "getAll"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Foods array is present', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('foods');",
              "    pm.expect(jsonData.foods).to.be.an('array');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "GraphQL - Get All Users",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{auth_token}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"query { getAllUsers { id userName email usertype createdAt } }\"\n}"
        },
        "url": {
          "raw": "{{base_url}}/graphql",
          "host": ["{{base_url}}"],
          "path": ["graphql"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('GraphQL response is valid', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('data');",
              "    pm.expect(jsonData.data.getAllUsers).to.be.an('array');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "GraphQL - Search Foods",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"query\": \"query SearchFoods($query: String!) { searchFoods(query: $query) { id title description price imageUrl rating } }\",\n  \"variables\": {\n    \"query\": \"test\"\n  }\n}"
        },
        "url": {
          "raw": "{{base_url}}/graphql",
          "host": ["{{base_url}}"],
          "path": ["graphql"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Search results are valid', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('data');",
              "    pm.expect(jsonData.data.searchFoods).to.be.an('array');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Rate Limiting Test",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{base_url}}/health",
          "host": ["{{base_url}}"],
          "path": ["health"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// This test should be run multiple times to test rate limiting",
              "pm.test('Response is valid', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 429]);",
              "});",
              "",
              "if (pm.response.code === 429) {",
              "    pm.test('Rate limit message is correct', function () {",
              "        const jsonData = pm.response.json();",
              "        pm.expect(jsonData.message).to.include('Too many requests');",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set dynamic test data",
          "pm.environment.set('test_username', 'testuser_' + Date.now());",
          "pm.environment.set('test_email', 'test_' + Date.now() + '@example.com');",
          "pm.environment.set('test_category_name', 'Test Category ' + Date.now());",
          "pm.environment.set('test_food_name', 'Test Food ' + Date.now());"
        ]
      }
    }
  ]
}
